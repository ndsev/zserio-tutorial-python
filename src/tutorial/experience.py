# Automatically generated by Zserio Python generator version 1.0.2 using Zserio core 2.14.1.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import tutorial.language

class Experience:
    def __init__(
            self,
            years_of_experience_: int = int(),
            programming_language_: typing.Union[tutorial.language.Language, None] = None) -> None:
        self._years_of_experience_ = years_of_experience_
        self._programming_language_ = programming_language_

    @classmethod
    def from_reader(
            cls: typing.Type['Experience'],
            zserio_reader: zserio.BitStreamReader) -> 'Experience':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, Experience):
            return ((self._years_of_experience_ == other._years_of_experience_) and
                    (self._programming_language_ == other._programming_language_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self._years_of_experience_)
        result = zserio.hashcode.calc_hashcode_object(result, self._programming_language_)

        return result

    @property
    def years_of_experience(self) -> int:
        return self._years_of_experience_

    @years_of_experience.setter
    def years_of_experience(self, years_of_experience_: int) -> None:
        self._years_of_experience_ = years_of_experience_

    @property
    def programming_language(self) -> typing.Union[tutorial.language.Language, None]:
        return self._programming_language_

    @programming_language.setter
    def programming_language(self, programming_language_: typing.Union[tutorial.language.Language, None]) -> None:
        self._programming_language_ = programming_language_

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 6
        end_bitposition += self._programming_language_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 6
        end_bitposition = self._programming_language_.initialize_offsets(end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._years_of_experience_ = zserio_reader.read_bits(6)
        self._programming_language_ = tutorial.language.Language.from_reader(zserio_reader)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_bits(self._years_of_experience_, 6)
        self._programming_language_.write(zserio_writer)

"""
Automatically generated by Zserio Python extension version 2.2.0.
Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
"""

import typing
import zserio

import tutorial.Language

class Experience:
    def __init__(
            self,
            yearsOfExperience_: int = int(),
            programmingLanguage_: typing.Union[tutorial.Language.Language, None] = None) -> None:
        self._yearsOfExperience_ = yearsOfExperience_
        self._programmingLanguage_ = programmingLanguage_

    @classmethod
    def fromReader(
            cls: typing.Type['Experience'],
            reader: zserio.BitStreamReader) -> 'Experience':
        instance = cls()
        instance.read(reader)

        return instance

    def __eq__(self, other: object) -> bool:
        if isinstance(other, Experience):
            return (self._yearsOfExperience_ == other._yearsOfExperience_ and
                    self._programmingLanguage_ == other._programmingLanguage_)

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calcHashCode(result, hash(self._yearsOfExperience_))
        result = zserio.hashcode.calcHashCode(result, hash(self._programmingLanguage_))

        return result

    def getYearsOfExperience(self) -> int:
        return self._yearsOfExperience_

    def setYearsOfExperience(self, yearsOfExperience_: int) -> None:
        self._yearsOfExperience_ = yearsOfExperience_

    def getProgrammingLanguage(self) -> typing.Union[tutorial.Language.Language, None]:
        return self._programmingLanguage_

    def setProgrammingLanguage(self, programmingLanguage_: typing.Union[tutorial.Language.Language, None]) -> None:
        self._programmingLanguage_ = programmingLanguage_

    def bitSizeOf(self, bitPosition: int = 0) -> int:
        endBitPosition = bitPosition
        endBitPosition += 6
        endBitPosition += self._programmingLanguage_.bitSizeOf(endBitPosition)

        return endBitPosition - bitPosition

    def initializeOffsets(self, bitPosition: int) -> int:
        endBitPosition = bitPosition
        endBitPosition += 6
        endBitPosition = self._programmingLanguage_.initializeOffsets(endBitPosition)

        return endBitPosition

    def read(self, reader: zserio.BitStreamReader) -> None:
        self._yearsOfExperience_ = reader.readBits(6)
        self._programmingLanguage_ = tutorial.Language.Language.fromReader(reader)

    def write(self, writer: zserio.BitStreamWriter, *, callInitializeOffsets: bool = True) -> None:
        del callInitializeOffsets

        writer.writeBits(self._yearsOfExperience_, 6)
        self._programmingLanguage_.write(writer)
